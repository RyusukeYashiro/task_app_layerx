// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"time"

	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for ErrorResponseCode.
const (
	CONFLICT        ErrorResponseCode = "CONFLICT"
	FORBIDDEN       ErrorResponseCode = "FORBIDDEN"
	INTERNALERROR   ErrorResponseCode = "INTERNAL_ERROR"
	NOTFOUND        ErrorResponseCode = "NOT_FOUND"
	UNAUTHORIZED    ErrorResponseCode = "UNAUTHORIZED"
	VALIDATIONERROR ErrorResponseCode = "VALIDATION_ERROR"
)

// Defines values for TaskStatus.
const (
	DONE       TaskStatus = "DONE"
	INPROGRESS TaskStatus = "IN_PROGRESS"
	TODO       TaskStatus = "TODO"
)

// Assignee defines model for Assignee.
type Assignee struct {
	AssignedAt time.Time `json:"assignedAt"`
	AssignedBy User      `json:"assignedBy"`
	User       User      `json:"user"`
}

// AuthResponse defines model for AuthResponse.
type AuthResponse struct {
	// Token JWT トークン
	Token string `json:"token"`
	User  User   `json:"user"`
}

// CreateTaskRequest defines model for CreateTaskRequest.
type CreateTaskRequest struct {
	// AssigneeIds アサインするユーザーIDのリスト
	AssigneeIds *[]int64   `json:"assigneeIds,omitempty"`
	Description *string    `json:"description"`
	DueDate     *time.Time `json:"dueDate"`
	Priority    *int       `json:"priority,omitempty"`

	// Status タスクのステータス
	Status *TaskStatus `json:"status,omitempty"`
	Title  string      `json:"title"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Code    ErrorResponseCode       `json:"code"`
	Details *map[string]interface{} `json:"details,omitempty"`
	Message string                  `json:"message"`
}

// ErrorResponseCode defines model for ErrorResponse.Code.
type ErrorResponseCode string

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	Email    openapi_types.Email `json:"email"`
	Password string              `json:"password"`
}

// SignupRequest defines model for SignupRequest.
type SignupRequest struct {
	Email    openapi_types.Email `json:"email"`
	Name     string              `json:"name"`
	Password string              `json:"password"`
}

// TaskListResponse defines model for TaskListResponse.
type TaskListResponse struct {
	Items []TaskResponse `json:"items"`

	// Page 現在のページ番号
	Page int `json:"page"`

	// PerPage 1ページあたりの件数
	PerPage int `json:"perPage"`

	// Total 総件数
	Total int64 `json:"total"`
}

// TaskResponse defines model for TaskResponse.
type TaskResponse struct {
	Assignees   []Assignee `json:"assignees"`
	CreatedAt   time.Time  `json:"createdAt"`
	Description *string    `json:"description"`
	DueDate     *time.Time `json:"dueDate"`
	Id          int64      `json:"id"`
	Owner       User       `json:"owner"`
	Priority    int        `json:"priority"`

	// Status タスクのステータス
	Status    TaskStatus `json:"status"`
	Title     string     `json:"title"`
	UpdatedAt time.Time  `json:"updatedAt"`
}

// TaskStatus タスクのステータス
type TaskStatus string

// UpdateTaskRequest defines model for UpdateTaskRequest.
type UpdateTaskRequest struct {
	// AssigneeIds アサインするユーザーIDのリスト（完全置換）
	AssigneeIds *[]int64   `json:"assigneeIds,omitempty"`
	Description *string    `json:"description"`
	DueDate     *time.Time `json:"dueDate"`
	Priority    *int       `json:"priority,omitempty"`

	// Status タスクのステータス
	Status *TaskStatus `json:"status,omitempty"`
	Title  *string     `json:"title,omitempty"`
}

// User defines model for User.
type User struct {
	CreatedAt time.Time           `json:"createdAt"`
	Email     openapi_types.Email `json:"email"`
	Id        int64               `json:"id"`
	Name      string              `json:"name"`
}

// BadRequest defines model for BadRequest.
type BadRequest = ErrorResponse

// Conflict defines model for Conflict.
type Conflict = ErrorResponse

// Forbidden defines model for Forbidden.
type Forbidden = ErrorResponse

// InternalServerError defines model for InternalServerError.
type InternalServerError = ErrorResponse

// NotFound defines model for NotFound.
type NotFound = ErrorResponse

// Unauthorized defines model for Unauthorized.
type Unauthorized = ErrorResponse

// ListTasksParams defines parameters for ListTasks.
type ListTasksParams struct {
	// Status タスクのステータスでフィルタ
	Status *TaskStatus `form:"status,omitempty" json:"status,omitempty"`

	// DueFrom 期限開始日時（ISO8601形式）
	DueFrom *time.Time `form:"dueFrom,omitempty" json:"dueFrom,omitempty"`

	// DueTo 期限終了日時（ISO8601形式）
	DueTo *time.Time `form:"dueTo,omitempty" json:"dueTo,omitempty"`

	// PriorityMin 優先度の最小値（0-5）
	PriorityMin *int `form:"priorityMin,omitempty" json:"priorityMin,omitempty"`

	// PriorityMax 優先度の最大値（0-5）
	PriorityMax *int `form:"priorityMax,omitempty" json:"priorityMax,omitempty"`

	// Sort ソート順（カンマ区切り、`-`で降順）
	// 許可される列: dueDate, priority, createdAt
	// 例: `-dueDate,priority` → 期限降順、優先度昇順
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`

	// Page ページ番号（1始まり）
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PerPage 1ページあたりの件数
	PerPage *int `form:"perPage,omitempty" json:"perPage,omitempty"`
}

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody = LoginRequest

// SignupJSONRequestBody defines body for Signup for application/json ContentType.
type SignupJSONRequestBody = SignupRequest

// CreateTaskJSONRequestBody defines body for CreateTask for application/json ContentType.
type CreateTaskJSONRequestBody = CreateTaskRequest

// UpdateTaskJSONRequestBody defines body for UpdateTask for application/json ContentType.
type UpdateTaskJSONRequestBody = UpdateTaskRequest
