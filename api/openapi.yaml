openapi: 3.0.3
info:
  title: Task Management API
  version: 1.0.0
  description: |
    簡易タスク管理アプリケーション API

    ## 認証
    - JWT Bearer Token を使用
    - ログイン後、`Authorization: Bearer <token>` ヘッダーで認証

    ## 認可ルール
    - **オーナー**: タスクの全操作（参照・更新・削除・アサイン管理）
    - **アサイン先**: 参照のみ（編集不可）
    - **その他**: アクセス不可（404で隠蔽）
  contact:
    name: API Support

servers:
  - url: http://localhost:8080/api/v1
    description: Local development server

tags:
  - name: auth
    description: 認証関連エンドポイント
  - name: tasks
    description: タスク管理エンドポイント

security:
  - bearerAuth: []

paths:
  /auth/signup:
    post:
      tags: [auth]
      summary: ユーザー登録
      description: 新規ユーザーを登録する（認証不要）
      operationId: signup
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequest'
      responses:
        '201':
          description: 登録成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400': { $ref: '#/components/responses/BadRequest' }
        '409': { $ref: '#/components/responses/Conflict' }
        '500': { $ref: '#/components/responses/InternalServerError' }

  /auth/login:
    post:
      tags: [auth]
      summary: ログイン
      description: メールアドレスとパスワードでログインし、JWTトークンを取得
      operationId: login
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: ログイン成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '500': { $ref: '#/components/responses/InternalServerError' }

  /auth/logout:
    post:
      tags: [auth]
      summary: ログアウト
      description: 現在のユーザーの全トークンを無効化する
      operationId: logout
      responses:
        '204':
          description: ログアウト成功
        '401': { $ref: '#/components/responses/Unauthorized' }
        '500': { $ref: '#/components/responses/InternalServerError' }

  /users:
    get:
      tags: [auth]
      summary: ユーザー一覧取得
      description: システムに登録されている全ユーザーの一覧を取得（タスクアサイン用）
      operationId: getUsers
      responses:
        '200':
          description: 取得成功
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
        '401': { $ref: '#/components/responses/Unauthorized' }
        '500': { $ref: '#/components/responses/InternalServerError' }

  /tasks:
    get:
      tags: [tasks]
      summary: タスク一覧取得
      description: |
        自分がオーナーまたはアサインされているタスクを取得

        注: 検索・フィルタ・ソート機能は今後実装予定
      operationId: listTasks
      responses:
        '200':
          description: 取得成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskListResponse'
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '500': { $ref: '#/components/responses/InternalServerError' }

    post:
      tags: [tasks]
      summary: タスク作成
      description: 新しいタスクを作成する。作成者が自動的にオーナーになる
      operationId: createTask
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTaskRequest'
      responses:
        '201':
          description: 作成成功
          headers:
            Location:
              description: 作成されたリソースのURL
              schema:
                type: string
                format: uri
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '500': { $ref: '#/components/responses/InternalServerError' }

  /tasks/{id}:
    parameters:
      - name: id
        in: path
        required: true
        description: タスクID
        schema: { type: integer, format: int64, example: 123 }

    get:
      tags: [tasks]
      summary: タスク詳細取得
      description: 指定したタスクの詳細を取得（オーナーまたはアサイン先のみ）
      operationId: getTask
      responses:
        '200':
          description: 取得成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
        '401': { $ref: '#/components/responses/Unauthorized' }
        '404': { $ref: '#/components/responses/NotFound' }
        '500': { $ref: '#/components/responses/InternalServerError' }

    patch:
      tags: [tasks]
      summary: タスク更新
      description: タスクを更新する（オーナーのみ）
      operationId: updateTask
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTaskRequest'
      responses:
        '200':
          description: 更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
        '500': { $ref: '#/components/responses/InternalServerError' }

    delete:
      tags: [tasks]
      summary: タスク削除
      description: タスクを削除する（オーナーのみ、ソフトデリート）
      operationId: deleteTask
      responses:
        '204':
          description: 削除成功
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
        '500': { $ref: '#/components/responses/InternalServerError' }

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "JWT Bearer Token (Authorization: Bearer <token>)"

  schemas:
    # ---- Auth ----
    SignupRequest:
      type: object
      required: [email, password, name]
      properties:
        email: { type: string, format: email, maxLength: 255, example: "user@example.com" }
        password: { type: string, format: password, minLength: 8, maxLength: 72, example: "SecurePass123!" }
        name: { type: string, minLength: 1, maxLength: 100, example: "山田太郎" }

    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email: { type: string, format: email, example: "user@example.com" }
        password: { type: string, format: password, example: "SecurePass123!" }

    AuthResponse:
      type: object
      required: [token, user]
      properties:
        token: { type: string, description: "JWT トークン", example: "eyJhbGciOi..." }
        user: { $ref: '#/components/schemas/User' }

    User:
      type: object
      required: [id, email, name, createdAt]
      properties:
        id: { type: integer, format: int64, example: 1 }
        email: { type: string, format: email, example: "user@example.com" }
        name: { type: string, example: "山田太郎" }
        createdAt: { type: string, format: date-time, example: "2025-10-19T10:00:00Z" }

    UserResponse:
      type: object
      required: [id, email, name]
      properties:
        id: { type: integer, format: int64, example: 1 }
        email: { type: string, format: email, example: "user@example.com" }
        name: { type: string, example: "山田太郎" }
      description: ユーザー情報（アサイン選択用の簡易版）

    # ---- Tasks ----
    TaskStatus:
      type: string
      description: タスクのステータス
      enum: [TODO, IN_PROGRESS, DONE]

    CreateTaskRequest:
      type: object
      required: [title]
      properties:
        title: { type: string, minLength: 1, maxLength: 255, example: "プレゼン資料作成" }
        description: { type: string, maxLength: 10000, nullable: true, example: "来週の会議用プレゼン資料を作成する" }
        dueDate: { type: string, format: date-time, nullable: true, example: "2025-10-25T17:00:00Z" }
        status: { $ref: '#/components/schemas/TaskStatus' }
        priority: { type: integer, minimum: 0, maximum: 5, default: 0, example: 3 }
        assigneeIds:
          type: array
          maxItems: 50
          items: { type: integer, format: int64 }
          example: [2, 3, 5]
          description: アサインするユーザーIDのリスト

    UpdateTaskRequest:
      type: object
      properties:
        title: { type: string, minLength: 1, maxLength: 255, example: "プレゼン資料作成（更新版）" }
        description: { type: string, maxLength: 10000, nullable: true, example: "資料の構成を変更しました" }
        dueDate: { type: string, format: date-time, nullable: true, example: "2025-10-26T17:00:00Z" }
        status: { $ref: '#/components/schemas/TaskStatus' }
        priority: { type: integer, minimum: 0, maximum: 5, example: 4 }
        assigneeIds:
          type: array
          maxItems: 50
          items: { type: integer, format: int64 }
          example: [2, 3, 5, 7]
          description: アサインするユーザーIDのリスト（完全置換）

    TaskResponse:
      type: object
      required: [id, title, status, priority, owner, assignees, createdAt, updatedAt]
      properties:
        id: { type: integer, format: int64, example: 123 }
        title: { type: string, example: "プレゼン資料作成" }
        description: { type: string, nullable: true, example: "来週の会議用プレゼン資料を作成する" }
        dueDate: { type: string, format: date-time, nullable: true, example: "2025-10-25T17:00:00Z" }
        status: { $ref: '#/components/schemas/TaskStatus' }
        priority: { type: integer, example: 3 }
        owner: { $ref: '#/components/schemas/User' }
        assignees:
          type: array
          items: { $ref: '#/components/schemas/Assignee' }
        createdAt: { type: string, format: date-time, example: "2025-10-19T10:00:00Z" }
        updatedAt: { type: string, format: date-time, example: "2025-10-19T15:30:00Z" }

    Assignee:
      type: object
      required: [user, assignedBy, assignedAt]
      properties:
        user: { $ref: '#/components/schemas/User' }
        assignedBy: { $ref: '#/components/schemas/User' }
        assignedAt: { type: string, format: date-time, example: "2025-10-19T12:00:00Z" }

    TaskListResponse:
      type: object
      required: [items]
      properties:
        items:
          type: array
          items: { $ref: '#/components/schemas/TaskResponse' }

    # ---- Errors ----
    ErrorResponse:
      type: object
      required: [code, message]
      properties:
        code:
          type: string
          enum: [VALIDATION_ERROR, UNAUTHORIZED, FORBIDDEN, NOT_FOUND, CONFLICT, INTERNAL_ERROR]
          example: VALIDATION_ERROR
        message: { type: string, example: "title is required" }
        details:
          type: object
          additionalProperties: true
          example: { field: "title" }

  responses:
    BadRequest:
      description: リクエストが不正です
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ErrorResponse' }
          example:
            code: VALIDATION_ERROR
            message: "title is required"
            details: { field: "title" }

    Unauthorized:
      description: 認証が必要です
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ErrorResponse' }
          example:
            code: UNAUTHORIZED
            message: "authentication required"

    Forbidden:
      description: 権限がありません
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ErrorResponse' }
          example:
            code: FORBIDDEN
            message: "permission denied"

    NotFound:
      description: リソースが見つかりません
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ErrorResponse' }
          example:
            code: NOT_FOUND
            message: "task not found"

    Conflict:
      description: リソースが競合しています
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ErrorResponse' }
          example:
            code: CONFLICT
            message: "email already exists"

    InternalServerError:
      description: サーバー内部エラー
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ErrorResponse' }
          example:
            code: INTERNAL_ERROR
            message: "internal server error"